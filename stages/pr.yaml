stages: 

# ===============
#  Detect Drift
# ==============
- stage: terraformstage
  displayName: Detect Drift
  jobs:
  - job: terraformJob
    displayName: Detecting Drift
    steps: 

    # ==============
    # terraform plan
    # =============

    - template: ../steps/demo-init.yaml
    - bash: |
        # Remember Exit Code
        set -uo pipefail
        exitCode=" "
        # Run `terraform plan` and save output (used later for posting to GitHub)
        if terraform plan -detailed-exitcode --input=false -var-file=c2-terraform.auto.tfvars -var="client_id=$ARM_CLIENT_ID"  -var="client_secret=$ARM_CLIENT_SECRET" -var="tenant_id=$ARM_TENANT_ID"  -var="subscription_id=$ARM_SUBSCRIPTION_ID" \
            | tee plan-output.txt \
            exit ${PIPESTATUS[0]}
        then
          echo "No configuration drift detected" \
          echo "##vso[task.setvariable variable=exitCode;isOutput=true]zero"
        else
          #tf_exit_code=$?
          echo "##vso[task.setvariable variable=exitCode;isOutput=true]non-zero"
          echo "Configuration drift detected" 
        #  exit $tf_exit_code
        fi
      displayName: Terraform - Detect Configuration drift
      name: planStep
      env:
        ARM_SUBSCRIPTION_ID:        $(kv-arm-subscription-id)
        ARM_CLIENT_ID:              $(kv-arm-client-id)
        ARM_CLIENT_SECRET:          $(kv-arm-client-secret)
        ARM_TENANT_ID:              $(kv-arm-tenant-id)
        AZDO_ORG_SERVICE_URL:       $(kv-azure-devops-org-url)
        AZDO_PERSONAL_ACCESS_TOKEN: $(kv-azure-devops-pat)

    - bash: |
          echo "$(planStep.exitCode)"
          echo "$(planStep.exitCode)" >>  ./exitCode.txt

  # Save Plan Output
  # ==========
    - publish: ./plan-output.txt
      artifact: terraformPlanOutput
      displayName: Save 'terraform plan' output
      condition: succeededorFailed()
    
    - publish: ./exitCode.txt
      artifact: terraformexitCode
      displayName: Save 'terraform exit code' output
      condition: succeededorFailed()
      
  # - task: PublishPipelineArtifact@1
  #   displayName: Save 'terraform plan' output
  #   inputs:
  #     targetPath: '$(Pipeline.Workspace)/$(Build.BuildId)-tfplan.zip'
  #     artifact: 'terraformPlanOutput
    
  # ============================
  # Post Status to Pull Request 
  # ============================

- stage: pullRequestCommentStage
  displayName: Adding Results to Pull Request
  condition: and(succeededorFailed(), eq(variables.isPR, 'True'))
  variables:
    githubRepoName: '$(Build.Repository.Name)'
    githubConnectionName: 'LBCIT-Terraform-scripts'
    exitCode: $[ stageDependencies.terraformStage.terraformJob.outputs['planStep.exitCode']]
  jobs:
  - job: postCommentJob
    displayName: Post to GitHub
    steps:
    

      # Download the artifacts
    - download: current
      artifact: terraformexitCode

    # Read the variable from the file, then expose it in the job
    - bash: |
        exitCode=$(cat $(Pipeline.Workspace)/terraformexitCode/exitCode.txt)
        echo "##vso[task.setvariable variable=exitCode]$exitCode"

  # display the exitcode status
    - bash: | 
        echo "$(exitCode)"

    # Add Comment - No Drift
    # =====================
    
    - task: GitHubComment@0
      condition: eq(variables.exitCode, 'zero')
      displayName: Post - No Drift
      inputs:
        gitHubConnection: ${{ variables.githubConnectionName }}
        repositoryName: $(githubRepoName)
        comment: |
          ## &nbsp;No Configuration drift detected
          Source Version: $(Build.SourceVersion)


    # Add Coomment - Drift detected
    - task: GitHubComment@0
      condition: eq(variables.exitCode, 'non-zero')
      displayName: Post - Drift Dectected
      inputs:
        gitHubConnection: ${{ variables.githubConnectionName }}
        repositoryName: $(githubRepoName)
        comment: |
          ## &nbsp; Configuration drift detected
          Source Version: $(Build.SourceVersion)
          Approving this Pull Request may result in destructive changes to your Azure resources. Please review the `terraform plan` output diff at Azure Pipelines Build Result Page.
          Proceed with caution!
